matName[c(2,2)]
matName[c(2,2),]
matName[,c(2,2)]
matName
matName[2]
matName[,2]
apply(matName[,2],2,rev)
matName[2]
matName[,2]
matName[,2][1]
matName[,2][2]
apply(matName[,2][],2,rev)
t(matName)
t(matName[,2])
matName[,2]
matName[ ncol(matName):1, ]
matName[ ,ncol(matName):1 ]
matName[,2]
matName[,2:1]
matName[,2:2]
matName[,2]
matName
matName[,2][2:1]
matName[,2]
matName[,2] = matName[,2][2:1]
matName
matName = matrix(c("Maria", "Rodriguez De La Cruz","Peter","Freeman"),nrow=2)
matName
matName[,2] = matName[,2][2:1]
matName
mat = matrix(as.character(1:16),4,4)
mat
apply(mat, as.integer)
apply(mat, as.integer())
as.integer(mat)
matrix(as.integer(mat))
mat = matrix(as.character(1:16),4,4)
mat
mat
as.integer(mat)
matrix(as.integer(mat),4,4)
my.str = "PUT STRING HERE"
nchar(my.str)
my.list = strsplit(my.str, split="")
my.chars = my.list[[1]]
head(my.chars, 20)
length(my.chars)
my.chartab = table(my.chars)
my.chartab
Where the fear has gone there will be nothing. Only I will remain."
And when it has gone past I will turn the inner eye to see its path. Where the fear has gone there will be nothing. Only I will remain."
my.str = "I must not fear. Fear is the mind-killer. Fear is the little-death that brings total obliteration. I will face my fear. I will permit it to pass over me and through me. And when it has gone past I will turn the inner eye to see its path. Where the fear has gone there will be nothing. Only I will remain."
nchar(my.str)
my.list = strsplit(my.str, split="")
my.chars = my.list[[1]]
head(my.chars, 20)
length(my.chars)
my.chartab = table(my.chars)
my.chartab
plot(my.chartab, xlab="Characters", ylab="Counts")
bill[1:5]
bill
bill = "Bill Clinton"
others = c("George Bush", "Ronald Reagan", "Jimmy Carter", "Gerald Ford")
bill[1:5]
bill[]
bill[][1]
substr(bill,5)
substr(bill,1,5)
substr(others, 1,5)
presidents = c(bill,others)
presidents
substr(presidents, nchar(candidates)-2,nchar(candidates))
substr(presidents, nchar(presidents)-2,nchar(presidents))
presidents.borg = presidents
presidents.borg
substr(presidents, nchar(presidents)-3,nchar(presidents)) = "borg"
presidents
bill = "Bill Clinton"
others = c("George Bush", "Ronald Reagan", "Jimmy Carter", "Gerald Ford")
substr(bill,1,5)
substr(others, 1,5)
presidents = c(bill,others)
presidents
substr(presidents, nchar(presidents)-2,nchar(presidents))
presidents.borg = presidents
substr(presidents.borg, nchar(presidents)-3,nchar(presidents)) = "borg"
presidents.borg
knitr::opts_chunk$set(echo = TRUE)
# comment
# hidden comment
summary(cars)
plot(x = 1:10, 1:10, col = 1:10, pch = 19)
##########################
# R Tutorial
# Class: 36-401
# Date: August 31, 2017
# Author: Collin Eubanks
##########################
1 + 1
10 / 4
2 * 2
15 %% 7
2 ^ 4
x <- 100
2 * x
y <- 10
x / y
z <- x + y
1:10
10:1
c(1,2,5,0,1234)
seq(0, 10, by = 0.5)
seq(0, 10, length = 7)
rep(0, times = 10)
x <- 1:10
length(x)
x[5]
x[6:10]
y <- 11:20
z <- c(x,y)
z
matrix(1:16, ncol = 4, nrow = 4)
matrix(1:16, ncol = 4, nrow = 4, byrow = TRUE)
A <- matrix(1:16, ncol = 4, nrow = 4, byrow = TRUE)
ncol(A)
nrow(A)
dim(A)
t(A)
#solve(A) # error: A is not invertible!
B <- matrix(16:1, ncol = 4, nrow = 4, byrow = TRUE)
A %*% B # matrix multiplication
# WARNING! A * B and A ^ 2 perform elementwise operations!
A + B
b <- 1:4
A %*% b # matrix-vector multiplication
# ? and help() are your friends!
?matrix
?nrow
x <- "this is a string"
c("we","can","store","strings","in","a","vector","too")
paste("we","can","paste","strings","together", sep = " ")
length(x)
nchar(x)
substr(x, 1, 4)
x <- 1:10
min(x)
max(x)
sum(x)
mean(x)
range(x)
ls()
rm(x)
rm(list = ls(all = TRUE))
gc()
getwd()
setwd("~")
list.files()
setwd("~/Desktop")
x <- 1
x == 1
x != 1
# <, >, <=, >=, ==, !=
# Multiple comparisons
y <- 2
x == 1 & y == 2
x == 1 & y < 2
rm(list = ls(all = TRUE))
gc()
# Index search
x <- 1:10
which(x < 5)
which(x > 4 & x < 6)
which(x <= 1 | x >= 10)
A <- matrix(1:16, ncol = 4, byrow = TRUE)
which(A == 12, arr.ind = TRUE)
if ( TRUE ){
# code you want to run if TRUE
} else {
# code you want to run if FALSE
}
x <- 1
if ( x < 0 ){
cat("x is negative!")
} else {
cat("x is nonnegative!")
}
x <- 0
for ( itr in 1:10 ){
x <- x + 1
}
x
n <- 4
x <- 1
while ( n >= 1 ){
x <- x * n
n <- n - 1
}
myFactorial <- function(n){
x <- 1
while ( n >= 1 ){
x <- x * n
n <- n - 1
}
return(x)
}
cleanup <- function(){
rm(list = setdiff(ls(all = TRUE, envir = globalenv()), "cleanup"), envir = globalenv())
gc()
}
set.seed(1) # set the seed if you want to reproduce your work
# Sampling from well-known distributions
rnorm(50, mean = 0, sd = 1)
runif(50, min = 0, max = 1)
rbinom(50, size = 20, prob = 0.5)
rchisq(50, df = 10)
# others: rgamma, rbeta, rf
# Distribution functions
pnorm(-1.96, mean = 0, sd = 1)
punif(0.2, min = 0, max = 1)
pbinom(1, size = 10, prob = 0.5)
# analogous functions for other distributions: pchisq, pgamma, pbeta, pf
# Density functions
dnorm(0, mean = 0, sd = 1)
runif(0.5, min = 0, max = 1)
dbinom(0, size = 10, prob = 0.5)
dbinom(0, size = 10, prob = 0.5) + dbinom(1, size = 10, prob = 0.5) == pbinom(1, size = 10, prob = 0.5) # beware of round-off error!
# similarly: dchisq, dgamma, dbeta, df
# Quantile functions
qnorm(0.975, mean = 0, sd = 1)
qbinom(0.5, size = 10, prob = 0.5)
# again: qchisq, qgamma, qbeta, qf
# Sampling from discrete distributions
sample(1:10, size = 3, replace = TRUE)
sample(1:10, size = 10, replace = TRUE, prob = 1:10 / sum(1:10))
# File I/O
setwd("~/Desktop")
x <- 1:10
save(x, file = "tmp.RData")
rm(x)
# x: Error (not found)
load("tmp.RData")
x
write(x, file = "tmp.txt")
scan("tmp.txt")
# Data frames
cleanup()
x <- 1:100
y <- x + rnorm(100, sd = 10)
data <- data.frame(x,y)
View(data)
head(data)
tail(data)
write.table(data, file = "data.txt")
rm(data)
data <- read.table("data.txt")
write.csv(data, file = "data.csv", row.names = FALSE)
rm(data)
data <- read.csv("data.csv")
install.packages("dplyr", repos = "http://cran.us.r-project.org")
library(dplyr)
# combining data frames
cleanup()
x <- 1:100
y <- x + rnorm(100, sd = 10)
data <- data.frame(x,y)
moredata <- data.frame(x = c(101,102), y = c(101,102) + rnorm(2, sd = 10))
rbind(data, moredata)
bind_rows(data, moredata) # much faster (helpful for large data frames!)
cleanup()
x <- 1:100
y <- x + rnorm(100, sd = 10)
data <- data.frame(x,y)
plot(data$x, data$y)
plot(data[[1]], data[[2]])
with(data, plot(x,y))
# plot labels
with(data,
plot(x, y, xlab = "X", ylab = "Y", main = "This is a scatterplot", cex.main = 3, cex.lab = 2)
)
hist(data$y, xlab = "Y", main = "This is a histogram", cex.main = 3, cex.lab = 2)
# Simple linear regression
model <- lm(y ~ x, data = data)
names(model)
with(data,
plot(x, y, xlab = "X", ylab = "Y", main = "This is a scatterplot", cex.main = 3, cex.lab = 2)
)
abline(model, col = "red", lwd = 3)
# Add an outlier
extra.point <- data.frame(x = 100, y = 0)
data2 <- rbind(data, extra.point)
# refit the model
model2 <- lm(y ~ x, data = data2)
with(data,
plot(x, y, xlab = "X", ylab = "Y", main = "This is a scatterplot with an outlier", cex.main = 2, cex.lab = 2)
)
# add the outlier
points(extra.point, col = "blue", pch = 19)
# Examine the effect of the outlier on the model
abline(model, col = "red", lwd = 3) # the linear fit before the outlier
abline(model2, col = "blue", lwd = 3) # the fit after the outlier
# If you have OS X
quartz(height = 7, width = 8)
with(data,
plot(x, y, xlab = "X", ylab = "Y", main = "This is a scatterplot with an outlier", cex.main = 2, cex.lab = 2)
)
# add the outlier
points(extra.point, col = "blue", pch = 19)
# Examine the effect of the outlier on the model
abline(model, col = "red", lwd = 3) # the linear fit before the outlier
abline(model2, col = "blue", lwd = 3) # the fit after the outlier
quartz.save(file = "plot.pdf", type = "pdf")
dev.off()
# If you don't have a Mac... use dev.new() instead of quartz() and dev.copy() instead of quartz.save()
# Alternatively
?pdf
?png
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(x = 1:10, 1:10, col = 1:10, pch = 19)
1 + 1
10 / 4
2 * 2
15 %% 7
2 ^ 4
for ( itr in 1:10 ){
x <- x + 1
}
x <- 1:100
y <- x + rnorm(100, sd = 10)
data <- data.frame(x,y)
plot(data$x, data$y)
plot(data[[1]], data[[2]])
with(data, plot(x,y))
cleanup()
x <- 1:100
y <- x + rnorm(100, sd = 10)
data <- data.frame(x,y)
plot(data$x, data$y)
plot(data[[1]], data[[2]])
with(data, plot(x,y))
# plot labels
with(data,
plot(x, y, xlab = "X", ylab = "Y", main = "This is a scatterplot", cex.main = 3, cex.lab = 2)
)
hist(data$y, xlab = "Y", main = "This is a histogram", cex.main = 3, cex.lab = 2)
# Simple linear regression
cleanup()
x <- 1:100
y <- x + rnorm(100, sd = 10)
data <- data.frame(x,y)
plot(data$x, data$y)
plot(data[[1]], data[[2]])
with(data, plot(x,y))
# plot labels
with(data,
plot(x, y, xlab = "X", ylab = "Y", main = "This is a scatterplot", cex.main = 3, cex.lab = 2)
)
hist(data$y, xlab = "Y", main = "This is a histogram", cex.main = 3, cex.lab = 2)
# Simple linear regression
model <- lm(y ~ x, data = data)
names(model)
with(data,
plot(x, y, xlab = "X", ylab = "Y", main = "This is a scatterplot", cex.main = 3, cex.lab = 2)
)
abline(model, col = "red", lwd = 3)
# Add an outlier
extra.point <- data.frame(x = 100, y = 0)
data2 <- rbind(data, extra.point)
# refit the model
model2 <- lm(y ~ x, data = data2)
with(data,
plot(x, y, xlab = "X", ylab = "Y", main = "This is a scatterplot with an outlier", cex.main = 2, cex.lab = 2)
)
# add the outlier
points(extra.point, col = "blue", pch = 19)
# Examine the effect of the outlier on the model
abline(model, col = "red", lwd = 3) # the linear fit before the outlier
abline(model2, col = "blue", lwd = 3) # the fit after the outlier
plogis(x,y)
plot(x,y)
data.frame(a = 1:5, b = 11:15, c = 111:115)
df = data.frame(a = 1:5, b = 11:15, c = 111:115)
row(df)
dim(df)
rows(df)
df[,]
df[[]]
df[[1]]
df[[2]]
presidents.list = strsplit(presidents, split = " ")
presidents.list = strsplit(presidents, split=" ")
presidents = c("Bill Clinton","George Bush","Ronald Reagan","Jimmy Carter","Gerald Ford")
presidents.list = strsplit(presidents, split=" ")
presidents.list
presidents.list[c(1,2,7,8)]
presidents.list[c(1,2,7,8),]
presidents.list[c(1,2,7,8)]
presidents.list[[c(1,2,7,8)]]
presidents.list[c(1,2,7,8)]
strsplit(presidents[4],split="o")
strsplit(presidents,split=c(" ","o"))
vice.presidents = c("Al Gore","Dick Cheney","George H. W. Bush","Walter Mondale", "Nelson Rockefeller")
paste(presidents , vice.presidents, collapse = " & ")
presidents = c("Bill Clinton","George Bush","Ronald Reagan","Jimmy Carter","Gerald Ford")
vice.presidents = c("Al Gore","Dick Cheney","George H. W. Bush","Walter Mondale", "Nelson Rockefeller")
paste(presidents ,vice.presidents, collapse = " & ")
paste(presidents ,vice.presidents, sep = " & ")
vice.presidents = c("Al Gore","Dick Cheney","George H. W. Bush","Walter Mondale", "Nelson Rockefeller")
pairs = paste(presidents ,vice.presidents, sep = " & ")
pairs
pairs.oneline = paste(pairs, collapse = ", ")
pairs.oneline
presidents = c("Bill Clinton","George Bush","Ronald Reagan","Jimmy Carter","Gerald Ford")
vice.presidents = c("Al Gore","Dan Quayle","George H. W. Bush","Walter Mondale", "Nelson Rockefeller")
pairs = paste(presidents ,vice.presidents, sep = " & ")
pairs
rev(pairs)
paste(rev(pairs), collapse = ", ")
trump.lines = readLines("http://www.stat.cmu.edu/~pfreeman/trump.txt")
length(trump.lines)
clinton.lines = readLines("http://www.stat.cmu.edu/~pfreeman/clinton.txt")
length(clinton.lines)
head(trump.lines)
tail(trump.lines)
head(clinton.lines)
tail(clinton.lines)
trump.oneline = paste(trump.lines,collapse=" ")
clinton.oneline = paste(clinton.lines,collapse=" ")
trump.oneline = paste(trump.lines,collapse=" ")
trump.words = strsplit(trump.oneline,split=" ")
clinton.oneline = paste(clinton.lines,collapse=" ")
clinton.words = strsplit(clinton.oneline,split=" ")
length(trump.words)
length(clinton.words)
trump.oneline = paste(trump.lines,collapse=" ")
trump.words = strsplit(trump.oneline,split=" ")
clinton.oneline = paste(clinton.lines,collapse=" ")
clinton.words = strsplit(clinton.oneline,split=" ")
length(trump.words)
length(clinton.words)
trump.words
trump.words[]
length(trump.words)
length(trump.words[])
length(trump.words[[1]])
length(clinton.words[[1]])
trump.oneline = paste(trump.lines,collapse=" ")
trump.words = strsplit(trump.oneline,split=" ")[[1]]
clinton.oneline = paste(clinton.lines,collapse=" ")
clinton.words = strsplit(clinton.oneline,split=" ")[[1]]
trump.wordtot = length(trump.words)
clinton.wordtot = length(clinton.words)
trump.wordtot
clinton.wordtot
trump.words.unique = sort(unique(tolower(trump.words)))
clinton.words.unique = sort(unique(tolower(clinton.words)))
head(trump.words.unique,5)
head(trump.words.unique)
trump.words.unique = sort(unique(tolower(trump.words)), increasing=TRUE)
trump.words.unique = sort(unique(tolower(trump.words)), decreasing=FALSE)
head(trump.words.unique)
trump.words.unique = sort(unique(tolower(trump.words)))
clinton.words.unique = sort(unique(tolower(clinton.words)))
head(trump.words.unique,5)
head(clinton.words.unique,5)
length(unique(trump.words.sorted.unique))/length(trump.words)
length(unique(trump.words.unique))/length(trump.words)
length(unique(clinton.words.unique))/length(clinton.words)
length(unique(trump.words.unique))/length(trump.words)
length(unique(clinton.words.unique))/length(clinton.words)
length(unique(trump.words.unique))/length(trump.words)
length(unique(clinton.words.unique))/length(clinton.words)
trump.lines = readLines("http://www.stat.cmu.edu/~pfreeman/trump.txt")
length(trump.lines)
clinton.lines = readLines("http://www.stat.cmu.edu/~pfreeman/clinton.txt")
length(clinton.lines)
head(trump.lines)
tail(trump.lines)
head(clinton.lines)
tail(clinton.lines)
intersect.words = intersect(tolower(trump.words), tolower(clinton.words))
union.words = union(tolower(trump.words), tolower(clinton.words))
intersect.words/union.words
length(intersect.words)/length(union.words)
trump.chars = strsplit(trump.oneline,split="")[[1]]
clinton.chars = strsplit(clinton.oneline,split="")[[1]]
trump.chars = tolower(strsplit(trump.oneline,split="")[[1]])
clinton.chars = tolower(strsplit(clinton.oneline,split="")[[1]])
table(trump.chars)
table(clinton.chars)
trump.chartab = table(trump.chars)
clinton.chartab = table(clinton.chars)
trump.chartab
clinton.chartab
sort(trump.chartab, decreasing=TRUE)
sort(trump.chartab, decreasing=TRUE, 10)
sort(trump.chartab, decreasing=TRUE)
head(sort(trump.chartab, decreasing=TRUE), 10)
head(sort(clinton.chartab, decreasing=TRUE), 10)
head(sort(trump.chartab, decreasing=TRUE), 10)
head(sort(clinton.chartab, decreasing=TRUE), 10)
head(sort(trump.chartab, decreasing=TRUE), 10)
head(sort(clinton.chartab, decreasing=TRUE), 10)
head(sort(trump.chartab, decreasing=TRUE), 10)
head(sort(clinton.chartab, decreasing=TRUE), 10)
plot(trump.chartab)
plot(clinton.chartab)
plot(trump.chartab)
plot(clinton.chartab)
x = sample(10,10)
x[c(2,3,7,8)]
